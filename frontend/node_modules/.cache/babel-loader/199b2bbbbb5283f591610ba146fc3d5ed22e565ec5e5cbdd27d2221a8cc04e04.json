{"ast":null,"code":"// return non-nullable if `fragmentType` is non-nullable\n\n// return nullable if `fragmentType` is nullable\n\n// return array of non-nullable if `fragmentType` is array of non-nullable\n\n// return array of nullable if `fragmentType` is array of nullable\n\nexport function useFragment(_documentNode, fragmentType) {\n  return fragmentType;\n}\nexport function makeFragmentData(data, _fragment) {\n  return data;\n}","map":{"version":3,"names":["useFragment","_documentNode","fragmentType","makeFragmentData","data","_fragment"],"sources":["/Users/n/dev/nicolas-website/src/__generated__/fragment-masking.ts"],"sourcesContent":["import { TypedDocumentNode as DocumentNode, ResultOf } from '@graphql-typed-document-node/core';\n\n\nexport type FragmentType<TDocumentType extends DocumentNode<any, any>> = TDocumentType extends DocumentNode<\n  infer TType,\n  any\n>\n  ? TType extends { ' $fragmentName'?: infer TKey }\n    ? TKey extends string\n      ? { ' $fragmentRefs'?: { [key in TKey]: TType } }\n      : never\n    : never\n  : never;\n\n// return non-nullable if `fragmentType` is non-nullable\nexport function useFragment<TType>(\n  _documentNode: DocumentNode<TType, any>,\n  fragmentType: FragmentType<DocumentNode<TType, any>>\n): TType;\n// return nullable if `fragmentType` is nullable\nexport function useFragment<TType>(\n  _documentNode: DocumentNode<TType, any>,\n  fragmentType: FragmentType<DocumentNode<TType, any>> | null | undefined\n): TType | null | undefined;\n// return array of non-nullable if `fragmentType` is array of non-nullable\nexport function useFragment<TType>(\n  _documentNode: DocumentNode<TType, any>,\n  fragmentType: ReadonlyArray<FragmentType<DocumentNode<TType, any>>>\n): ReadonlyArray<TType>;\n// return array of nullable if `fragmentType` is array of nullable\nexport function useFragment<TType>(\n  _documentNode: DocumentNode<TType, any>,\n  fragmentType: ReadonlyArray<FragmentType<DocumentNode<TType, any>>> | null | undefined\n): ReadonlyArray<TType> | null | undefined\nexport function useFragment<TType>(\n  _documentNode: DocumentNode<TType, any>,\n  fragmentType: FragmentType<DocumentNode<TType, any>> | ReadonlyArray<FragmentType<DocumentNode<TType, any>>> | null | undefined\n): TType | ReadonlyArray<TType> | null | undefined {\n  return fragmentType as any\n}\n\n\nexport function makeFragmentData<\n  F extends DocumentNode,\n  FT extends ResultOf<F>\n>(data: FT, _fragment: F): FragmentType<F> {\n  return data as FragmentType<F>;\n}"],"mappings":"AAcA;;AAKA;;AAKA;;AAKA;;AAKA,OAAO,SAASA,WAAW,CACzBC,aAAuC,EACvCC,YAA+H,EAC9E;EACjD,OAAOA,YAAY;AACrB;AAGA,OAAO,SAASC,gBAAgB,CAG9BC,IAAQ,EAAEC,SAAY,EAAmB;EACzC,OAAOD,IAAI;AACb"},"metadata":{},"sourceType":"module","externalDependencies":[]}