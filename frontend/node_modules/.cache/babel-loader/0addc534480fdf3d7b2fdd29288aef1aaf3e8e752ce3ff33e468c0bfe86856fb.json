{"ast":null,"code":"/* eslint-disable */\nimport * as types from './graphql';\n/**\n * Map of all GraphQL operations in the project.\n *\n * This map has several performance disadvantages:\n * 1. It is not tree-shakeable, so it will include all operations in the project.\n * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.\n * 3. It does not support dead code elimination, so it will add unused operations.\n *\n * Therefore it is highly recommended to use the babel-plugin for production.\n */\nconst documents = {\n  \"\\n  query ListCats($cursor: String) {\\n    cats_connection(first: 10, after: $cursor) {\\n      edges {\\n        node {\\n          id\\n          name\\n          owner {\\n            name\\n          }\\n        }\\n      }\\n      pageInfo {\\n        endCursor\\n        hasNextPage\\n      }\\n    }\\n  }\\n\": types.ListCatsDocument\n};\n\n/**\n * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.\n */\n\nexport function gql(source) {\n  var _source;\n  return (_source = documents[source]) !== null && _source !== void 0 ? _source : {};\n}","map":{"version":3,"names":["types","documents","ListCatsDocument","gql","source"],"sources":["/Users/n/dev/nicolas-website/src/__generated__/gql.ts"],"sourcesContent":["/* eslint-disable */\nimport * as types from './graphql';\nimport { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';\n\n/**\n * Map of all GraphQL operations in the project.\n *\n * This map has several performance disadvantages:\n * 1. It is not tree-shakeable, so it will include all operations in the project.\n * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.\n * 3. It does not support dead code elimination, so it will add unused operations.\n *\n * Therefore it is highly recommended to use the babel-plugin for production.\n */\nconst documents = {\n    \"\\n  query ListCats($cursor: String) {\\n    cats_connection(first: 10, after: $cursor) {\\n      edges {\\n        node {\\n          id\\n          name\\n          owner {\\n            name\\n          }\\n        }\\n      }\\n      pageInfo {\\n        endCursor\\n        hasNextPage\\n      }\\n    }\\n  }\\n\": types.ListCatsDocument,\n};\n\n/**\n * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.\n */\nexport function gql(source: \"\\n  query ListCats($cursor: String) {\\n    cats_connection(first: 10, after: $cursor) {\\n      edges {\\n        node {\\n          id\\n          name\\n          owner {\\n            name\\n          }\\n        }\\n      }\\n      pageInfo {\\n        endCursor\\n        hasNextPage\\n      }\\n    }\\n  }\\n\"): (typeof documents)[\"\\n  query ListCats($cursor: String) {\\n    cats_connection(first: 10, after: $cursor) {\\n      edges {\\n        node {\\n          id\\n          name\\n          owner {\\n            name\\n          }\\n        }\\n      }\\n      pageInfo {\\n        endCursor\\n        hasNextPage\\n      }\\n    }\\n  }\\n\"];\n\n/**\n * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.\n *\n *\n * @example\n * ```ts\n * const query = gql(`query GetUser($id: ID!) { user(id: $id) { name } }`);\n * ```\n *\n * The query argument is unknown!\n * Please regenerate the types.\n**/\nexport function gql(source: string): unknown;\n\nexport function gql(source: string) {\n  return (documents as any)[source] ?? {};\n}\n\nexport type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;"],"mappings":"AAAA;AACA,OAAO,KAAKA,KAAK,MAAM,WAAW;AAGlC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,SAAS,GAAG;EACd,6SAA6S,EAAED,KAAK,CAACE;AACzT,CAAC;;AAED;AACA;AACA;;AAiBA,OAAO,SAASC,GAAG,CAACC,MAAc,EAAE;EAAA;EAClC,kBAAQH,SAAS,CAASG,MAAM,CAAC,6CAAI,CAAC,CAAC;AACzC"},"metadata":{},"sourceType":"module","externalDependencies":[]}