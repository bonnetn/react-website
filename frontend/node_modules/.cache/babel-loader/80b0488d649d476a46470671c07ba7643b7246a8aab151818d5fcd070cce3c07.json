{"ast":null,"code":"var _jsxFileName = \"/Users/n/dev/nicolas-website/src/routes/Search.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport \"./Search.scss\";\nimport Template from \"../components/Template\";\nimport { NetworkStatus, useQuery } from \"@apollo/client\";\nimport { gql } from \"../__generated__\";\nimport SearchBox from \"../components/SearchBox\";\nimport CatsList from \"../components/CatsList\";\nimport MoreButton from \"../components/MoreButton\";\nimport { useSearchParams } from \"react-router-dom\";\nimport { useEffect } from \"react\";\n\n// If the user can fetch more results, then this is a function.\n// Otherwise, undefined.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SEARCH_CATS = gql(`\n  query SearchCats($cursor: String, $search: String!) {\n    search_cats_connection(first: 20, after: $cursor, args: {search: $search}, order_by: {id: asc}) {\n      edges {\n        node {\n          id\n          age\n          name\n          owner {\n            name\n          }\n        }\n      }\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n    }\n  }\n`);\nconst queryName = \"q\";\nconst defaultQueryValue = \"\";\nconst useSearchQuery = () => {\n  _s();\n  var _searchParams$get;\n  const [searchParams, setSearchParams] = useSearchParams();\n  const query = (_searchParams$get = searchParams.get(queryName)) !== null && _searchParams$get !== void 0 ? _searchParams$get : defaultQueryValue;\n  const setSearchQuery = query => {\n    const existingParams = Array.from(searchParams.entries());\n    const newParams = new URLSearchParams([...existingParams.filter(_ref => {\n      let [key, _] = _ref;\n      return key !== queryName;\n    }), [queryName, query]]);\n    setSearchParams(newParams);\n  };\n  return [query, setSearchQuery];\n};\n_s(useSearchQuery, \"/eCs5CB4FLGAVLeprHBYLwBGf/Q=\", false, function () {\n  return [useSearchParams];\n});\nfunction Search() {\n  _s2();\n  const [query, setQuery] = useSearchQuery();\n  const handleNewInput = input => {\n    setQuery(input);\n  };\n  const {\n    loading,\n    error,\n    data,\n    fetchMore,\n    refetch,\n    networkStatus\n  } = useQuery(SEARCH_CATS, {\n    variables: {\n      search: query\n    },\n    notifyOnNetworkStatusChange: true\n  });\n  useEffect(() => {\n    refetch({\n      search: query\n    });\n  }, [query]);\n  const fetchingMore = networkStatus === NetworkStatus.fetchMore;\n  const f = () => {\n    if (loading && !fetchingMore)\n      // Note: When fetching more elements, we do not want to clear the\n      // ones that are already on the screen so that the user's scrollbar\n      // does not reset.\n      return [{\n        status: \"loading\"\n      }, undefined];\n    if (error)\n      // There has been an error.\n      return [{\n        status: \"error\",\n        error: error.message\n      }, undefined];\n    if (data === undefined)\n      // No data returned by the API!\n      return [{\n        status: \"error\",\n        error: \"GraphQL endpoint did not return data.\"\n      }, undefined];\n    const {\n      search_cats_connection: {\n        edges,\n        pageInfo: {\n          hasNextPage,\n          endCursor\n        }\n      }\n    } = data;\n    const handleMoreResults = async () => {\n      if (hasNextPage) {\n        await fetchMore({\n          variables: {\n            cursor: endCursor\n          }\n        });\n      }\n    };\n    const cats = edges.map(edge => edge.node);\n    return [{\n      status: \"ready\",\n      cats: cats\n    }, handleMoreResults];\n  };\n  const [state, moreResults] = f();\n  return /*#__PURE__*/_jsxDEV(Template, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"search-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"search-box\",\n        children: /*#__PURE__*/_jsxDEV(SearchBox, {\n          onInput: handleNewInput,\n          defaultQuery: query\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CatsList, {\n      state: state\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MoreButton, {\n      hasNext: moreResults !== undefined,\n      handleMoreResults: moreResults !== null && moreResults !== void 0 ? moreResults : async () => {},\n      fetchingMore: fetchingMore\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 127,\n    columnNumber: 5\n  }, this);\n}\n_s2(Search, \"lI5VQrusJGdLJOEFZMO5OUJI/9Q=\", false, function () {\n  return [useSearchQuery, useQuery];\n});\n_c = Search;\nexport default Search;\nvar _c;\n$RefreshReg$(_c, \"Search\");","map":{"version":3,"names":["Template","NetworkStatus","useQuery","gql","SearchBox","CatsList","MoreButton","useSearchParams","useEffect","SEARCH_CATS","queryName","defaultQueryValue","useSearchQuery","searchParams","setSearchParams","query","get","setSearchQuery","existingParams","Array","from","entries","newParams","URLSearchParams","filter","key","_","Search","setQuery","handleNewInput","input","loading","error","data","fetchMore","refetch","networkStatus","variables","search","notifyOnNetworkStatusChange","fetchingMore","f","status","undefined","message","search_cats_connection","edges","pageInfo","hasNextPage","endCursor","handleMoreResults","cursor","cats","map","edge","node","state","moreResults"],"sources":["/Users/n/dev/nicolas-website/src/routes/Search.tsx"],"sourcesContent":["import \"./Search.scss\";\nimport Template from \"../components/Template\";\nimport { NetworkStatus, useQuery } from \"@apollo/client\";\nimport { gql } from \"../__generated__\";\nimport SearchBox from \"../components/SearchBox\";\nimport CatsList, { Cat, Ready, State } from \"../components/CatsList\";\nimport MoreButton from \"../components/MoreButton\";\nimport { useSearchParams } from \"react-router-dom\";\nimport { useEffect, useMemo } from \"react\";\n\n// If the user can fetch more results, then this is a function.\n// Otherwise, undefined.\ntype MoreResults = (() => Promise<void>) | undefined;\n\nconst SEARCH_CATS = gql(`\n  query SearchCats($cursor: String, $search: String!) {\n    search_cats_connection(first: 20, after: $cursor, args: {search: $search}, order_by: {id: asc}) {\n      edges {\n        node {\n          id\n          age\n          name\n          owner {\n            name\n          }\n        }\n      }\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n    }\n  }\n`);\n\nconst queryName = \"q\";\nconst defaultQueryValue = \"\";\n\nconst useSearchQuery: () => [string, (query: string) => void] = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const query = searchParams.get(queryName) ?? defaultQueryValue;\n\n  const setSearchQuery = (query: string) => {\n    const existingParams = Array.from(searchParams.entries());\n    const newParams = new URLSearchParams([\n      ...existingParams.filter(([key, _]) => key !== queryName),\n      [queryName, query],\n    ]);\n    setSearchParams(newParams);\n  };\n\n  return [query, setSearchQuery];\n};\n\nfunction Search() {\n  const [query, setQuery] = useSearchQuery();\n\n  const handleNewInput = (input: string) => {\n    setQuery(input);\n  };\n\n  const { loading, error, data, fetchMore, refetch, networkStatus } = useQuery(\n    SEARCH_CATS,\n    {\n      variables: {\n        search: query,\n      },\n      notifyOnNetworkStatusChange: true,\n    }\n  );\n  useEffect(() => {\n    refetch({ search: query });\n  }, [query]);\n\n  const fetchingMore = networkStatus === NetworkStatus.fetchMore;\n\n  const f: () => [State, MoreResults] = () => {\n    if (loading && !fetchingMore)\n      // Note: When fetching more elements, we do not want to clear the\n      // ones that are already on the screen so that the user's scrollbar\n      // does not reset.\n      return [{ status: \"loading\" }, undefined];\n\n    if (error)\n      // There has been an error.\n      return [{ status: \"error\", error: error.message }, undefined];\n\n    if (data === undefined)\n      // No data returned by the API!\n      return [\n        {\n          status: \"error\",\n          error: \"GraphQL endpoint did not return data.\",\n        },\n        undefined,\n      ];\n\n    const {\n      search_cats_connection: {\n        edges,\n        pageInfo: { hasNextPage, endCursor },\n      },\n    } = data;\n\n    const handleMoreResults = async () => {\n      if (hasNextPage) {\n        await fetchMore({\n          variables: { cursor: endCursor },\n        });\n      }\n    };\n\n    const cats: Cat[] = edges.map((edge) => edge.node);\n\n    return [\n      {\n        status: \"ready\",\n        cats: cats,\n      },\n      handleMoreResults,\n    ];\n  };\n\n  const [state, moreResults] = f();\n\n  return (\n    <Template>\n      <div className={\"search-container\"}>\n        <div className={\"search-box\"}>\n          <SearchBox onInput={handleNewInput} defaultQuery={query} />\n        </div>\n      </div>\n\n      <CatsList state={state} />\n      <MoreButton\n        hasNext={moreResults !== undefined}\n        handleMoreResults={moreResults ?? (async () => {})}\n        fetchingMore={fetchingMore}\n      />\n    </Template>\n  );\n}\n\nexport default Search;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}